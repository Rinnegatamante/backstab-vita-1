// profile sce_fp_psp2

#define GLITCH_OPENGLES_2
#define CHEAT_SATURATION
#define SHADER_ADJUST_SATURATION
#define SHADER_DESATURATE_AMOUNT 0.150000
#define SHADER_RED_AMOUNT 0.400000
#define SHADER_GREEN_AMOUNT 0.100000
#define SHADER_BLUE_AMOUNT 0.200000
#define DEFAULT_LOD_BIAS -0.75
#define LOW_GFX_VERSION
#define USE_VERTEX_SPECULAR


#define USE_FOG

uniform sampler2D DiffuseMap1;
uniform sampler2D DiffuseMap2;
uniform float Factor;
uniform float LightFactor;

#ifdef USE_FOG
uniform float4 FogColor;

#endif


#ifdef SHADER_ADJUST_SATURATION
float4 desaturate (float4 c)
{
	float a = c.a; //save the alpha channel;
	c.a = dot (c.rgb,float3(SHADER_RED_AMOUNT,SHADER_GREEN_AMOUNT,SHADER_BLUE_AMOUNT)); // save the gray value in the alpha channel
	c.rgb=lerp(c.rgb,c.aaa,SHADER_DESATURATE_AMOUNT );//linearly interpolate the color torwards grey by 37.5%
	return float4(c.rgb,a); //return the new color with the saved alpha
}
#else
#define desaturate(x) x
#endif //SHADER_ADJUST_SATURATION

void main(
	float FogFactor : FOG,
	float2 vCoord0 : TEXCOORD0,
	float4 out gl_FragColor : COLOR
) {
	float4  Color1	= tex2Dbias(DiffuseMap1, float4(vCoord0, 1.0, -1.0));
	float4  Color2	= tex2Dbias(DiffuseMap2, float4(vCoord0, 1.0, -1.0));

#ifdef USE_FOG
	float4  Color		= lerp(Color1, Color2, Factor) * LightFactor;
	gl_FragColor			= lerp(Color, FogColor, FogFactor); // ATICA: to avoid need for extra vertices to control gradient
#else
	gl_FragColor			= desaturate(lerp(Color1, Color2, Factor) * LightFactor);
#endif
}
